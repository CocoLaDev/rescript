// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as $$Crypto from "crypto";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function encryptAes(key, iv, data) {
  try {
    var cipher = $$Crypto.createCipheriv("aes-256-cbc", key, iv);
    var encrypted = cipher.update(data, "utf8", "hex");
    var $$final = cipher.final("hex");
    return {
            TAG: "Ok",
            _0: encrypted + $$final
          };
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      var msg = obj._1.message;
      if (msg !== undefined) {
        return {
                TAG: "Error",
                _0: {
                  TAG: "Error",
                  _0: msg
                }
              };
      } else {
        return {
                TAG: "Error",
                _0: {
                  TAG: "Error",
                  _0: "Unknown encryption error"
                }
              };
      }
    }
    throw obj;
  }
}

function decryptAes(key, iv, encryptedData) {
  try {
    var decipher = $$Crypto.createDecipheriv("aes-256-cbc", key, iv);
    var decrypted = decipher.update(encryptedData, "hex", "utf8");
    var $$final = decipher.final("utf8");
    return {
            TAG: "Ok",
            _0: decrypted + $$final
          };
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      var msg = obj._1.message;
      if (msg !== undefined) {
        return {
                TAG: "Error",
                _0: {
                  TAG: "Error",
                  _0: msg
                }
              };
      } else {
        return {
                TAG: "Error",
                _0: {
                  TAG: "Error",
                  _0: "Unknown decryption error"
                }
              };
      }
    }
    throw obj;
  }
}

export {
  encryptAes ,
  decryptAes ,
}
/* crypto Not a pure module */
