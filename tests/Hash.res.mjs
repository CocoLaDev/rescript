// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Crypto from "../src/Crypto.res.mjs";

var passed = {
  contents: 0
};

var failed = {
  contents: 0
};

function assertTrue(name, condition) {
  if (condition) {
    console.log("✅ " + name);
    passed.contents = passed.contents + 1 | 0;
  } else {
    console.log("❌ " + name);
    failed.contents = failed.contents + 1 | 0;
  }
}

console.log("Hash.res");

function testSHA256() {
  var hash = $$Crypto.hashSHA256("Hello, World!");
  if (hash.TAG === "Ok") {
    assertTrue("SHA256: correct hash", hash._0 === "dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f");
  } else {
    assertTrue("SHA256: should not fail", false);
  }
  var hash$1 = $$Crypto.hashSHA256("");
  if (hash$1.TAG === "Ok") {
    return assertTrue("SHA256: empty string", hash$1._0 !== "");
  } else {
    return assertTrue("SHA256: empty string should not fail", false);
  }
}

function testSHA3() {
  var hash = $$Crypto.hashSHA3("Hello, World!");
  if (hash.TAG === "Ok") {
    assertTrue("SHA3: correct hash", hash._0 === "1af17a664e3fa8e419b8ba05c2a173169df76162a5a286e0c405b460d478f7ef");
  } else {
    assertTrue("SHA3: should not fail", false);
  }
  var hash$1 = $$Crypto.hashSHA3("");
  if (hash$1.TAG === "Ok") {
    return assertTrue("SHA3: empty string", hash$1._0 !== "");
  } else {
    return assertTrue("SHA3: empty string should not fail", false);
  }
}

testSHA256();

testSHA3();

console.log("Tests completed: " + String(passed.contents + failed.contents | 0) + " total, " + String(passed.contents) + " passed, " + String(failed.contents) + " failed\n");

export {
  passed ,
  failed ,
  assertTrue ,
  testSHA256 ,
  testSHA3 ,
}
/*  Not a pure module */
