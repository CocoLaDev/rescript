// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Crypto from "../src/Crypto.res.mjs";

var passed = {
  contents: 0
};

var failed = {
  contents: 0
};

function assertTrue(name, condition) {
  if (condition) {
    console.log("✅ " + name);
    passed.contents = passed.contents + 1 | 0;
  } else {
    console.log("❌ " + name);
    failed.contents = failed.contents + 1 | 0;
  }
}

console.log("KeysAndSignature.res");

function testKeyGeneration() {
  var match = $$Crypto.generateEcKeyPair();
  if (match.TAG !== "Ok") {
    return assertTrue("Key generation should not fail", false);
  }
  var match$1 = match._0;
  assertTrue("Key generation: public key not empty", match$1[0] !== "");
  assertTrue("Key generation: private key not empty", match$1[1] !== "");
}

function testSignatureVerification() {
  var message = "Hello, World!";
  var match = $$Crypto.generateEcKeyPair();
  if (match.TAG !== "Ok") {
    return assertTrue("Key generation should not fail", false);
  }
  var match$1 = match._0;
  var signature = $$Crypto.signData(message, match$1[1]);
  if (signature.TAG !== "Ok") {
    return assertTrue("Signing should not fail", false);
  }
  var signature$1 = signature._0;
  assertTrue("Signature: not empty", signature$1 !== "");
  var isValid = $$Crypto.verifySignature(message, signature$1, match$1[0]);
  if (isValid.TAG === "Ok") {
    return assertTrue("Signature verification", isValid._0);
  } else {
    return assertTrue("Signature verification should not fail", false);
  }
}

testKeyGeneration();

testSignatureVerification();

console.log("Tests completed: " + String(passed.contents + failed.contents | 0) + " total, " + String(passed.contents) + " passed, " + String(failed.contents) + " failed\n");

export {
  passed ,
  failed ,
  assertTrue ,
  testKeyGeneration ,
  testSignatureVerification ,
}
/*  Not a pure module */
